const express = require('express');
const router = express.Router();
const path = require('path');
const multer = require('multer'); // Import the multer library


var fs = require('fs');
//import PDFkit
var PDFDocument = require('pdfkit');

router.post('/pdf', function(req, res, next) {
	let body = req.body

	//Create a new pdf
	let doc = new PDFDocument({size: 'A4', autoFirstPage: false});
	let pdfName = 'pdf-' + Date.now() + '.pdf';

	//store the pdf in the public/pdf folder
	doc.pipe( fs.createWriteStream( path.join(__dirname, '..',`/public/pdf/${pdfName}` ) ) );

	//create the pdf pages and add the images
	for(let name of body){
		doc.addPage()
		doc.image(path.join(__dirname, '..',`/public/images/${name}`),20, 20, {width: 555.28, align: 'center', valign: 'center'} )
	}
	//end the process
	doc.end();

    //send the address back to the browser
	res.send(`/pdf/${pdfName}`)
})

// Multer file storage configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Store the images in the public/images folder
    cb(null, 'public/images');
  },
  filename: function (req, file, cb) {
    // Rename the images
    cb(null, file.fieldname + '-' + Date.now() + '.' + file.mimetype.split('/')[1]);
  },
});

// Configuration for file filter
const fileFilter = (req, file, callback) => {
  const ext = path.extname(file.originalname);
  // If the file extension isn't '.png' or '.jpg', return an error page; otherwise, return true
  if (ext !== '.png' && ext !== '.jpg') {
    return callback(new Error('Only png and jpg files are accepted'));
  } else {
    return callback(null, true);
  }
};

// Initialize Multer with the configurations for storage and file filter
const upload = multer({ storage, fileFilter });

// Create a '/' GET route that'll return the index.html file stored in the public/html folder
router.get('/new', function(req, res, next) {
	//delete the files stored in the session
	let filenames = req.session.imagefiles;

	let deleteFiles = async (paths) => {
		let deleting = paths.map( (file) => unlink(path.join(__dirname, '..', `/public/images/${file}`) ) )
		await Promise.all(deleting)
	}
	deleteFiles(filenames)

	//remove the data from the session
	req.session.imagefiles = undefined

	//redirect to the root URL
	res.redirect('/')
})

// Create a POST route for uploading files
router.post('/upload', upload.array('images'), function (req, res) {
  const files = req.files;
  const imgNames = [];

  // Extract the filenames
  for (const file of files) {
    imgNames.push(file.filename);
  }

  // Store the image filenames in a session
  req.session.imagefiles = imgNames;

  // Redirect the request to the root URL route
  res.redirect('/');
});

module.exports = router;
